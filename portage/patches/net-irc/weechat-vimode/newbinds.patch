diff --git a/README.md b/README.md
index cce0d81..492164c 100644
--- a/README.md
+++ b/README.md
@@ -191,7 +191,7 @@ Normal mode. When in search mode, pressing `/` will start a new search.
                     Close the current buffer (`/close`).
 * `:b#`             Go to the last buffer (`/input jump_last_buffer`).
 * `:b [N]`, `:bu [N]`, `:buf [N]`, `:buffer [N]`
-                    Go to buffer [N].
+                    Go to buffer `[N]`.
 * `:sp`, `:split`   Split current window in two (`/window splith`).
 * `:vs`, `:vsplit`  Split current window in two, but vertically
                     (`/window splitv`).
@@ -202,16 +202,11 @@ Normal mode. When in search mode, pressing `/` will start a new search.
 * `:<num>`          Start cursor mode and go to line.
 * `:nmap`           List user-defined key mappings.
 * `:nmap {lhs} {rhs}`
-                    Map {lhs} to {rhs} for Normal mode.
-                    Some (but not all) vim-like key codes are supported: <Up>,
-                    <Down>, <Left>, <Right>, <C-...> and <M-...>.
-                    User-defined mappings are not followed (e.g. doing `:nmap z
-                    j` followed by `:nmap u z` will result in `u` not doing
-                    anything, since `z` is a user-defined mapping).
-                    Default vimode bindings can be used (e.g. `:nmap J K`
-                    followed by `:nmap K J` will flip `J` and `K` without
-                    resulting in a loop).
-* `:nunmap {lhs}`   Remove the mapping of {lhs} for Normal mode.
+                    Map `{lhs}` to `{rhs}` for Normal mode.  Some (but not all) vim-like key codes are
+                    supported: `<Up>`, `<Down>`, `<Left>`, `<Right>`, `<C-...>` and `<M-...>`. These "user
+                    mappings" share much of the flexibility you are accustomed to from using regular
+                    vim mappings. See the [User Mappings](#usermaps) section for details and examples.
+* `:nunmap {lhs}`   Remove the mapping of `{lhs}` for Normal mode.
 * `:command`        All other commands will be passed to WeeChat (e.g.
                     ":script …" is equivalent to "/script …").
 
@@ -219,6 +214,48 @@ Normal mode. When in search mode, pressing `/` will start a new search.
 information). `&` in the replacement is also substituted by the pattern. If the
 `g` flag isn't present, only the first match will be substituted.
 
+# <a name="usermaps"></a>User Mappings
+User mappings are created using `:nmap {lhs} {rhs}`. The `{rhs}` argument consists of any
+combination of the following:
+
+* A WeeChat command, specified with: `/command [options]<CR>`. You may also use a colon (`:`)
+  in place of the forward slash (`/`) if you wish.
+* An INSERT mode action, specified by an `A`, `I`, `i`, or `a` to enter INSERT mode; then an
+  (optional) arbitrary string of characters to send to the command-line; and then (optionally) ending the
+  pattern with a `<CR>` (to submit the text to the current buffer) or a `<Esc>` to end the INSERT
+  mode action and go back to NORMAL mode.
+* Keys specifying a vim motion (`h`,`j`,`k`,`l`,`^`,`0`, etc.).
+* Keys specifying a vim operation (`dd`, `y$`, `cw`, etc.).
+
+A count may be specified either in the mapping itself or before triggering the mapping.
+Furthermore, you may place the following count tag anywhere (except inside an INSERT action) within
+the binding (`{rhs}`): `#{N}`, where `N` is some arbitrary integer. This special "count tag" is used to
+consume an external count. If no external count is provided, `N` will be used as the default
+count. This will all probably be easier to grasp after seeing a few examples:
+
+### Examples
+
+1) Commands can be concatenated together:
+     - INPUT: `:nmap h /cmd1<CR>/cmd2<CR>`
+     - OUTPUT [h]: Runs `/cmd1` then `/cmd2`.
+
+2) User defined bindings will be followed:
+     - INPUT: `:nmap j /buffer 5<CR>h`
+     - OUTPUT [j]: Go to the fifth buffer, then run `/cmd1`, and then run `/cmd2`.
+
+3) Bindings can take advantage of INSERT mode:
+     - INPUT: `:nmap k i/msg <Esc>0i`
+     - OUTPUT [k]: Prints "/msg " to the command-line and then returns the user to the beginning of the line. The user is left in INSERT mode.
+
+4) Counts are respected both internally and externally:
+     - INPUT: `:nmap j 3J`
+     - OUTPUT [j]: Go three buffers down.
+     - OUTPUT [3j]: Go nine buffers down.
+
+5) Special "count tag" gives you more flexibility when using external counts:
+     - INPUT: `:nmap @ /buffer #{3}<CR>`
+     - OUTPUT [7@]: Go to the seventh buffer.
+     - OUTPUT [@]: Go to the third buffer.
 
 # History:
 * version 0.1:      initial release
diff --git a/vimode.py b/vimode.py
index 06f9c28..abdaff2 100755
--- a/vimode.py
+++ b/vimode.py
@@ -22,6 +22,7 @@
 
 
 import csv
+import functools
 import json
 import os
 import re
@@ -30,8 +31,8 @@ try:
     from StringIO import StringIO
 except ImportError:
     from io import StringIO
-import time
 import sys
+import time
 
 import weechat
 
@@ -190,13 +191,30 @@ def cmd_nmap(args):
     See Also:
         `cmd_unmap()`.
     """
-    args = args.strip()
+    args = args.lstrip()
     if not args:
         mappings = vimode_settings['user_mappings']
         if mappings:
-            weechat.prnt("", "User-defined key mappings:")
-            for key, mapping in mappings.items():
-                weechat.prnt("", "{} -> {}".format(key, mapping))
+            title = "----- Vimode User Mappings -----"
+            bar = '-' * len(title)
+
+            weechat.prnt("", bar)
+            weechat.prnt("", title)
+            weechat.prnt("", bar)
+            for keys, mapping in sorted(mappings.items(),
+                                        key=lambda x: x[0].lower()):
+                pretty_keys = keys
+                for pttrn, repl in [(r'\u0001([A-Z])', r'<C-\1>'),
+                                    (r'\u0001\[([A-Z])', r'<M-\1>'),
+                                    ('"', '\\"')]:
+                    pretty_keys = re.sub(pttrn, repl, pretty_keys)
+
+                pretty_mapping = mapping
+                for pttrn, repl in [('"', '\\"')]:
+                    pretty_mapping = re.sub(pttrn, repl, pretty_mapping)
+
+                msg_fmt = '("{}", "{}")'
+                weechat.prnt("", msg_fmt.format(pretty_keys, pretty_mapping))
         else:
             weechat.prnt("", "nmap: no mapping found.")
     elif " " not in args:
@@ -1044,6 +1062,183 @@ VI_KEYS = {'j': "/window scroll_down",
 for i in range(10, 99):
     VI_KEYS['\x01[j%s' % i] = "/buffer %s" % i
 
+class UserMapping:
+    """Wraps User Mapping Defined by :nmap Command"""
+    def __init__(self, lhs, rhs):
+        self.lhs = lhs
+        self.rhs = rhs
+
+    def __call__(self, buf, input_line, cur, count):
+        rhs, count = self.process_count(count)
+        self.count = 0
+        self.index = 0
+        self.bad_sequence = ""
+        for _ in range(count):
+            bad_seq_list = []
+            for action in self.parse(rhs):
+                if self.bad_sequence:
+                    bad_seq_list.append(self.bad_sequence)
+
+                action(buf, input_line, cur, self.count)
+
+                # Reset count unless last key triggers
+                # INSERT mode ('i', 'a', 'I', 'A', ...).
+                if mode != 'INSERT':
+                    self.count = 0
+
+                self.bad_sequence = ""
+
+                buf = weechat.current_buffer()
+                input_line = weechat.buffer_get_string(buf, "input")
+                cur = weechat.buffer_get_integer(buf, "input_pos")
+
+            if self.bad_sequence:
+                bad_seq_list.append(self.bad_sequence)
+                self.bad_sequence = ""
+
+            self.report_errors(bad_seq_list)
+
+    def process_count(self, count):
+        """Checks for a special count tag of the form #{N} where N is some integer.
+
+        If a count tag is found, consume the count by substituting it in place
+        of the tag.
+        """
+        if re.search('#{\d+}', self.rhs) is not None:
+            if count:
+                rhs = re.sub('#{\d+}', str(count), self.rhs)
+            else:
+                rhs = re.sub('#{(\d+)}', r'\1', self.rhs)
+            new_count = 1
+        else:
+            rhs = self.rhs
+            new_count = max(count, 1)
+        return rhs, new_count
+
+    def report_errors(self, bad_seq_list):
+        """Alert user about any parsing errors that occurred."""
+        for bad_seq in bad_seq_list:
+            error_msg = 'Failed to parse "{}" sequence ' \
+                'in the following user mapping: ' \
+                '({}, {}).'.format(bad_seq, self.lhs, self.rhs)
+            print_warning(error_msg)
+
+    def parse(self, vi_keys):
+        """Vi_Keys Parser that Generates Callable Actions
+
+        Yields:
+            Callable object: action(buf, input_line, cur, count)
+        """
+        old_style_cmd_conditions = [
+            vi_keys[0] == '/',
+            re.search('<cr>', vi_keys.lower()) is None,
+        ]
+
+        if all(old_style_cmd_conditions):
+            print('Running old-style command.')
+            yield functools.partial(do_command, vi_keys)
+            return
+        else:
+            for action in self.new_style(vi_keys):
+                yield action
+
+    def new_style(self, vi_keys):
+        while self.index < len(vi_keys):
+            match = re.match('^[1-9][0-9]*', vi_keys[self.index:])
+            if match:
+                end = match.end() + self.index
+                print('vi_keys[self.index:end]: {}'.format(vi_keys[self.index:end]))
+                self.count += int(vi_keys[self.index:end])
+                self.index += match.end()
+
+            old_index = self.index
+            action = self.action_spec(vi_keys[self.index:])
+            print('Running %s command.' % (vi_keys[old_index:self.index], ))
+            if action is None:
+                continue
+            else:
+                yield action
+
+    def action_spec(self, vi_keys):
+        # >>> ENTER
+        if vi_keys.lower().startswith('<cr>'):
+            self.index += 4
+            set_mode('NORMAL')
+            return functools.partial(do_command, '/input return')
+
+        # >>> INSERT MODE SEQUENCE
+        if mode == 'INSERT':
+            match = re.search('<(cr|esc)>', vi_keys.lower())
+
+            if match:
+                set_mode('NORMAL')
+                index = match.start()
+                group = match.group()
+                if group == '<esc>':
+                    self.index += match.end()
+                else:
+                    self.index += match.start()
+            else:
+                index = len(vi_keys)
+                self.index += index
+
+            return self.imode_sequence(vi_keys[:index])
+
+        # >>> VI_KEY
+        for keys, command in VI_KEYS.items():
+            if vi_keys.startswith(keys):
+                self.index += len(keys)
+                if isinstance(command, str):
+                    return functools.partial(do_command, command)
+                else:
+                    return command
+
+        # >>> VI_MOTION
+        for motion in VI_MOTIONS:
+            if vi_keys.startswith(motion):
+                self.index += len(motion)
+                return functools.partial(do_motion, motion)
+
+        # >>> VI_OPERATOR
+        if len(vi_keys) > 1 and vi_keys[0] in VI_OPERATORS:
+            for motion in VI_MOTIONS:
+                if vi_keys[1:].startswith(motion):
+                    self.index += len(motion) + 1
+                    return functools.partial(do_operator,
+                                             vi_keys[:len(motion) + 1])
+
+        # >>> COMMAND
+        match = re.match('[:/].*?<cr>', vi_keys.lower())
+        if match:
+            end = match.end()
+            self.index += end
+            return functools.partial(do_command,
+                                     '/{}'.format(vi_keys[1:end - 4]))
+
+        # >>> PARSING ERROR
+        if vi_keys[0] in (':', '/'):
+            self.bad_sequence += vi_keys
+            self.index += len(vi_keys)
+        else:
+            self.bad_sequence += vi_keys[0]
+            self.index += 1
+
+    def imode_sequence(self, new_input):
+        """Factory for Action that Sends Input to Command-Line"""
+        def action(buf, input_line, cur, count):
+            for _ in range(max(int(count), 1)):
+                p = int(cur)
+                final_input = '{}{}{}'.format(input_line[:p],
+                                              new_input,
+                                              input_line[p:])
+                weechat.buffer_set(buf, "input", final_input)
+                new_pos = str(len(new_input) + p)
+                weechat.buffer_set(buf, "input_pos", new_pos)
+
+                input_line = weechat.buffer_get_string(buf, "input")
+                cur = weechat.buffer_get_integer(buf, "input_pos")
+        return action
+
 
 # Key handling.
 # =============
@@ -1298,21 +1493,13 @@ def cb_key_combo_default(data, signal, signal_data):
         if vi_keys not in ['u', '\x01R']:
             add_undo_history(buf, input_line)
         if isinstance(VI_KEYS[vi_keys], str):
-            for _ in range(max(count, 1)):
-                weechat.command("", VI_KEYS[vi_keys])
-                current_cur = weechat.buffer_get_integer(buf, "input_pos")
-                set_cur(buf, input_line, current_cur)
+            do_command(VI_KEYS[vi_keys], buf, input_line, cur, count)
         else:
             VI_KEYS[vi_keys](buf, input_line, cur, count)
     # It's a motion (e.g. "w") — call `motion_X()` where X is the motion, then
     # set the cursor's position to what that function returned.
     elif vi_keys in VI_MOTIONS:
-        if vi_keys in SPECIAL_CHARS:
-            func = "motion_%s" % SPECIAL_CHARS[vi_keys]
-        else:
-            func = "motion_%s" % vi_keys
-        end, _, _ = globals()[func](input_line, cur, count)
-        set_cur(buf, input_line, end)
+        do_motion(vi_keys, buf, input_line, cur, count)
     # It's an operator + motion (e.g. "dw") — call `motion_X()` (where X is
     # the motion), then we call `operator_Y()` (where Y is the operator)
     # with the position `motion_X()` returned. `operator_Y()` should then
@@ -1320,19 +1507,7 @@ def cb_key_combo_default(data, signal, signal_data):
     elif (len(vi_keys) > 1 and
           vi_keys[0] in VI_OPERATORS and
           vi_keys[1:] in VI_MOTIONS):
-        add_undo_history(buf, input_line)
-        if vi_keys[1:] in SPECIAL_CHARS:
-            func = "motion_%s" % SPECIAL_CHARS[vi_keys[1:]]
-        else:
-            func = "motion_%s" % vi_keys[1:]
-        pos, overwrite, catching = globals()[func](input_line, cur, count)
-        # If it's a catching motion, we don't want to call the operator just
-        # yet -- this code will run again when the motion is complete, at which
-        # point we will.
-        if not catching:
-            oper = "operator_%s" % vi_keys[0]
-            globals()[oper](buf, input_line, cur, pos, overwrite)
-    # The combo isn't completed yet (e.g. just "d").
+        do_operator(vi_keys, buf, input_line, cur, count)
     else:
         return weechat.WEECHAT_RC_OK_EAT
 
@@ -1462,6 +1637,8 @@ def load_user_mappings():
     if vimode_settings['user_mappings']:
         mappings.update(json.loads(vimode_settings['user_mappings']))
     vimode_settings['user_mappings'] = mappings
+    for k, v in mappings.items():
+        VI_KEYS[k] = UserMapping(k, v)
 
 
 # Command-line execution.
@@ -1582,6 +1759,35 @@ def cb_vimode_cmd(data, buf, args):
 
 # Motions/keys helpers.
 # ---------------------
+def do_command(cmd, buf, input_line, cur, count):
+    """Execute WeeChat Command"""
+    for _ in range(max(count, 1)):
+        weechat.command("", cmd)
+        current_cur = weechat.buffer_get_integer(buf, "input_pos")
+        set_cur(buf, input_line, current_cur)
+
+def do_motion(keys, buf, input_line, cur, count):
+    """Perform Vim-like Motion"""
+    if keys in SPECIAL_CHARS:
+        func = "motion_%s" % SPECIAL_CHARS[keys]
+    else:
+        func = "motion_%s" % keys
+    end, _, _ = globals()[func](input_line, cur, count)
+    set_cur(buf, input_line, end)
+
+def do_operator(keys, buf, input_line, cur, count):
+    add_undo_history(buf, input_line)
+    if keys[1:] in SPECIAL_CHARS:
+        func = "motion_%s" % SPECIAL_CHARS[keys[1:]]
+    else:
+        func = "motion_%s" % keys[1:]
+    pos, overwrite, catching = globals()[func](input_line, cur, count)
+    # If it's a catching motion, we don't want to call the operator just
+    # yet -- this code will run again when the motion is complete, at which
+    # point we will.
+    if not catching:
+        oper = "operator_%s" % keys[0]
+        globals()[oper](buf, input_line, cur, pos, overwrite)
 
 def get_pos(data, regex, cur, ignore_cur=False, count=0):
     """Return the position of `regex` match in `data`, starting at `cur`.
@@ -1695,9 +1901,6 @@ def get_keys_and_count(combo):
                 break
         combo = combo.replace(count, "", 1)
         count = int(count)
-    # It's a user defined key. Expand it.
-    if combo in vimode_settings['user_mappings']:
-        combo = vimode_settings['user_mappings'][combo]
     # It's a WeeChat command.
     if not matched and combo.startswith("/"):
         matched = True
@@ -1746,7 +1949,6 @@ def get_keys_and_count(combo):
 
 # Other helpers.
 # --------------
-
 def set_mode(arg):
     """Set the current mode and update the bar mode indicator."""
     global mode
